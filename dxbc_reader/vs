//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xy          4     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// SV_POSITION              0   xyzw        5      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB12[14], immediateIndexed
dcl_constantbuffer CB11[24], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_input v2.xyz
dcl_input v3.xyzw
dcl_input v4.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output_siv o5.xyzw, position
dcl_temps 5
dp3 r0.x, v2.xyzx, v2.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v2.xyzx
mad r0.w, v0.w, l(32767.000000), l(0.100000)
ftou r0.w, r0.w
imad r1.xy, l(3, 3, 0, 0), r0.wwww, l(1, 2, 0, 0)
imul null, r0.w, r0.w, l(3)
dp3 r2.z, cb11[r1.y + 8].xyzx, r0.xyzx
mul_sat r1.z, r2.z, cb11[7].z
add_sat o0.w, r1.z, cb11[7].w
dp3 r2.x, cb11[r0.w + 8].xyzx, r0.xyzx
dp3 r2.y, cb11[r1.x + 8].xyzx, r0.xyzx
mov o0.xyz, r2.xyzx
dp3 r0.x, cb11[r0.w + 8].xyzx, v3.xyzx
dp3 r0.y, cb11[r1.x + 8].xyzx, v3.xyzx
dp3 r0.z, cb11[r1.y + 8].xyzx, v3.xyzx
mov o1.xyz, r0.xyzx
mad r3.xyz, v0.xyzx, cb11[5].wwww, cb11[5].xyzx
mov o1.w, r3.z
mul r4.xyz, r0.yzxy, r2.zxyz
mad r0.xyz, r2.yzxy, r0.zxyz, -r4.xyzx
mul o2.xyz, r0.xyzx, v3.wwww
mad r0.xy, v1.xyxx, cb11[6].xyxx, cb11[6].zwzz
mul o3.zw, r0.xxxy, v4.xxxy
mov o3.xy, r0.xyxx
add r2.w, -cb12[7].x, cb11[r0.w + 8].w
mov r2.xyz, cb11[r0.w + 8].xyzx
mov r3.w, l(1.000000)
dp4 r0.x, r2.xyzw, r3.xyzw
add r2.w, -cb12[7].y, cb11[r1.x + 8].w
mov r2.xyz, cb11[r1.x + 8].xyzx
dp4 r0.y, r2.xyzw, r3.xyzw
add r2.w, -cb12[7].z, cb11[r1.y + 8].w
mov r2.xyz, cb11[r1.y + 8].xyzx
dp4 r0.z, r2.xyzw, r3.xyzw
add o4.xyz, r0.xyzx, cb12[7].xyzx
mul r1.xyzw, r0.yyyy, cb12[1].xyzw
mad r1.xyzw, cb12[0].xyzw, r0.xxxx, r1.xyzw
mad r0.xyzw, cb12[2].xyzw, r0.zzzz, r1.xyzw
add o5.xyzw, r0.xyzw, cb12[13].xyzw
ret 
// Approximately 0 instruction slots used
